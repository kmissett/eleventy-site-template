---
pageTitle: "Building an Eleventy Site, Part 1: Initial Setup"
date: 2024-11-20 12:00:00
tags: ["11ty"]
excerpt: "This is the first in a series detailing how I built this site in Eleventy 3.0. In this post we cover the initial installation, setup, and structure."
series: "building-an-eleventy-site"
draft: false
hasCodeBlock: true
---
<section aria-label="Intro">
<p>Hello, and welcome to the first post in a series, detailing how I built this site in <a href="https://www.11ty.dev/">Eleventy</a> 3.0. While there are already amazing articles and tutorials out there, I wanted to add my voice to the chorus. Also, I wanted to collect some of the best tips I've learned (and I'll do my best to give credit to those who inspired me).</p>
</section>
<section aria-labelledby="why-eleventy">
<h2 id="why-eleventy" tabindex="0">Why Eleventy?</h2>

<p>There are a lot of different ways to write and structure websites nowadays. What you choose depends on the size of the site and the functionality you want. <a href="https://www.youtube.com/watch?v=p02AIAoImzU">This video</a> by Kyle at <a href="https://www.youtube.com/@WebDevSimplified/videos">Web Dev Simplified</a> is a great discussion of the differences. Kyle does come down more on the side of <abbr>SSRs</abbr> (server-side renderers). But for what I'm doing here, I prefer <a href="https://developer.mozilla.org/en-US/docs/Glossary/SSG">static site generators</a> (<abbr>SSGs</abbr>) like Eleventy. The pages on this site will rarely change, so we don't need to build them dynamically at request time. Also, this site will still be fast on devices with slow connections or limited data. Finally, I don't love that tools like <a href="https://react.dev/">React</a> require JavaScript just to build the basic HTML code of the page. If the user has turned off JavaScript in their browser, then pages will not load at all. </p>

<p>The main tradeoff as I see it is the lack of a back-end database by default. This does make things like blog comments, sitewide searches, and user accounts tougher to implement. However, for me, at least for now, that tradeoff is worth it. I'd much rather keep files smaller and simpler, and have a lighter, faster site as a result.</p>

<p>OK, that's enough preamble. Let's get to it!</p>
</section>

<section aria-labelledby="install-eleventy">
	<h2 id="install-eleventy" tabindex="0">Step 1: Install Eleventy</h2>

	<p>We're going to install Eleventy using <a href="https://nodejs.org/">Node.js</a>, so be sure you have that already. I prefer using the <a href="https://nodejs.org/en/download/package-manager">package manager</a> in the command line to do this. Node includes <abbr>NPM</abbr> (Node Package Manager), which installs and runs packages, and <abbr>NPX</abbr> (Node Package eXecute), which runs Node packages without installing them. We'll be using <abbr>NPX</abbr> more at first, but eventually we'll be using <abbr>NPM</abbr> almost exclusively.</p>

	<p>Now we follow steps 1 through 3 in the Eleventy <a href="https://www.11ty.dev/docs/">Getting Started</a> guide. The explanations there are very good, so in the interest of keeping this post shorter, I'll defer to them. For convenience, here are the commands we'll run in our project's root directory:</p>
	
	<div class="code-block" aria-labelledby="codeblock-01">
		<header class="code-block-header" id="codeblock-01">Installing Eleventy</header>
	{% highlight "powershell" %}
npm init -y
npm pkg set type="module"
npm install --save-dev @11ty/eleventy
npx @11ty/eleventy
	{% endhighlight %}
	</div>
</section>

<section aria-labelledby="create-config-file">
	<h2 id="create-config-file" tabindex="0">Step 2: Project Structure and Config File</h2>
	<p>Next, make a directory called <code>src</code> in your root directory. Inside <code>src</code>, create the following folder structure:</p>

<div class="code-block" aria-labelledby="codeblock-02">
		<header class="code-block-header" id="codeblock-02">Folder structure</header>
	{% highlight "powershell" %}
src
  | _config
  | _data
  | _includes
    | icons
    | js
    | layouts
    | partials
    	| components
  	| scss
  | blog
  | fonts
  | images
	{% endhighlight %}
	</div>

	<p>Next, create a new file in our root directory, called <code>eleventy.config.js</code>. This will allow us to add a lot of functionality to our site. For more information about this file, please visit <a href="https://11ty.dev/docs/config">Eleventy's documentation</a>. We'll keep adding to this; for now, let's just set up the basics:</p>

	<div class="code-block" aria-labelledby="codeblock-03">
		<header class="code-block-header" id="codeblock-03">eleventy.config.js</header>
	{% highlight "js" %}
export default async function(eleventyConfig) {
	// general config
	return {

		// Control which files Eleventy will process
		templateFormats: [
			"md", 
			"njk", 
			"html", 
			"liquid"
		],

		// pre-process files with njk
		markdownTemplateEngine: "njk",
		dataTemplateEngine: "njk",
		htmlTemplateEngine: "njk",

		dir: {
		input: "src",
		}
	}
}
	{% endhighlight %}
	</div>

	<p>There are some opinionated choices in here. For example, Eleventy's default input directory is the root, but I prefer using a <code>src</code> folder. This keeps the input and output files more separate. I'm also more of a <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> fan, so I'm changing the default templating engine from <a href="https://shopify.github.io/liquid/">Liquid</a>. (Don't worry if these terms don't make sense yet. The point is that we can customize things however we want.)</p>

	<p>I think this has gone on long enough. In the next installment, we'll start creating some actual site pages and pieces. See you then!</p>
</section>