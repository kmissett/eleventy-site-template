---
pageTitle: "Building an Eleventy Site, Part 1: Initial Setup"
date: 2024-11-20 12:00:00
tags: ["11ty"]
excerpt: "This is the first in a series detailing how I built this site in Eleventy 3.0. In this post we cover the initial installation, setup, and structure."
series: "building-an-eleventy-site"
draft: false
hasCodeBlock: true
---
<section aria-label="Intro">
<p>Hello, and welcome to the first post in a series, detailing how I built this site in <a href="https://www.11ty.dev/">Eleventy</a> 3.0. While there are already amazing articles and tutorials out there, I wanted to add my voice to the chorus. Also, I wanted to collect some of the best tips I've learned (and I'll do my best to give credit to those who inspired me).</p>

<p>OK, that's enough preamble. Let's skip to the recipe!</p>
<section>
<section aria-labelledby="install-eleventy">
	<h2 id="install-eleventy" tabindex="0">Step 1: Install Eleventy</h2>

	<p>We're going to install Eleventy using <a href="https://nodejs.org/">Node.js</a>, so be sure you have that already. I prefer using the <a href="https://nodejs.org/en/download/package-manager">package manager</a> in the command line to do this, but there are many ways, so pick your preference. Note that Node also includes <abbr>NPM</abbr> (Node Package Manager), which we'll be using a lot.</p>

	<p>Now we follow steps 1 through 3 in the Eleventy <a href="https://www.11ty.dev/docs/">Getting Started</a> guide:</p>
	
	<p>First, create a directory somewhere on your computer where your site will live. I'm calling this "eleventy-site," but you can name it whatever you want. Navigate into that directory in your terminal, and then input the following:</p>
	
	<div class="code-block" aria-labelledby="codeblock-01">
		<header class="code-block-header" id="codeblock-01">Installing Eleventy</header>
	{% highlight "powershell" %}
npm init -y
npm pkg set type="module"
npm install --save-dev @11ty/eleventy
npx @11ty/eleventy
	{% endhighlight %}
	</div>

<p>Let's talk through these four lines. The first sets up a basic project in the folder, and generates a file named package.json. This file shows us, for instance, what packages we installed and what scripts we can run. As we go along, this file will change automatically, but we will make some changes ourselves. More on this down the road. The <code>-y</code> flag skips by default lots of questions about things we can change later anyway.</p>

<p>The second line tells <code>package.json</code> that all <abbr>JS</abbr> 
(JavaScript) files in this project will be of type "module." What that means is that we can use the most current <abbr>JS</abbr> structure and syntax.</p>

<p>That third command installs the latest version of Eleventy. When we do this, we create a folder named <code>node_modules</code>, which is where packages get installed. We also get a list of those packages and their dependencies, called <code>package-lock.json</code>. We don't ever have to interact with either of those, and in fact, we never should.</p>

<p>The final command runs Eleventy to make sure everything installed properly. It uses <abbr>NPX</abbr> (Node Package eXecute), which is a way to run a Node package without installing it. In general, we won't be using <abbr>NPX</abbr> much, as we'll be writing custom scripts to do the things we want to do.</p>
</section>

<section aria-labelledby="create-config-file">
	<h2 id="create-config-file" tabindex="0">Step 2: Project Structure and Config File</h2>
	<p>Make a directory called <code>src</code>, and create the following folder structure in there. We won't be using a lot of this yet, but we may as well set it up now:</p>

<div class="code-block" aria-labelledby="codeblock-02">
		<header class="code-block-header" id="codeblock-02">Folder structure</header>
	{% highlight "powershell" %}
src
  | _config
  | _data
  | _includes
    | icons
    | js
    | layouts
    | partials
    	| components
  	| scss
  | blog
  | fonts
  | images
	{% endhighlight %}
	</div>

	<p>Next, create a new file in our root directory, called <code>eleventy.config.js</code>. This will allow us to add a lot of functionality to our site. For more information about this, please visit <a href="https://11ty.dev/docs/config">Eleventy's documentation</a> about this config file. We'll keep adding to this; for now, let's just set up the basics:</p>

	<div class="code-block" aria-labelledby="codeblock-03">
		<header class="code-block-header" id="codeblock-03">eleventy.config.js</header>
	{% highlight "js" %}
export default async function(eleventyConfig) {
	// general config
	return {

		// Control which files Eleventy will process
		templateFormats: [
			"md", 
			"njk", 
			"html", 
			"liquid"
		],

		// pre-process files with njk
		markdownTemplateEngine: "njk",
		dataTemplateEngine: "njk",
		htmlTemplateEngine: "njk",

		dir: {
		input: "src",
		}
	}
}
	{% endhighlight %}
	</div>

	<p>There are some opinionated choices in here. For example, Eleventy's default input directory is the root, but I prefer using a <code>src</code> folder. This keeps the input and output files more separate. I'm also more of a <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> fan, so I'm changing the default templating engine from <a href="https://shopify.github.io/liquid/">Liquid</a>. (Don't worry if these terms don't make sense yet. The point is that we can customize things however we want.)</p>

	<p>I think this has gone on long enough. In the next installment, we'll start creating some actual site pages and pieces. See you then!</p>
</section>